        -:    0:Source:src/Socket/main.cpp
        -:    1:
        -:    2:#include<iostream>
        -:    3:#include "Socket.h"
        -:    4:#include <string>
        -:    5:#include <time.h>
        -:    6:#include <stdio.h>
        -:    7:#include <unistd.h>
        -:    8:#include <vector>
        -:    9:#include<list>
        -:   10:#include <algorithm>
        -:   11:#include <thread>
        -:   12:#include <deque>
        -:   13:#include <mutex>
        -:   14:
        -:   15:
        -:   16:std::mutex console_mutex;
        -:   17:
        -:   18:
    #####:   19:void   tcpConnectionsHandler( const int portNumber, std::deque<std::string>& buffer )
        -:   20:{
    #####:   21:    std::cout <<"Configuring Local address  ..." <<std::endl;
    #####:   22:    Socket tcpServer(portNumber, AF_INET, SOCK_STREAM, AI_PASSIVE);
    #####:   23:    std::cout<<"Creating socket..." << std::endl;
        -:   24:
    #####:   25:    const std::string DEVICE_NAME("Device1");
        -:   26:    //constexpr unsigned int TCP_PACKET_SIZE = 64;
        -:   27:
    #####:   28:    if( tcpServer.create() < 0 )
        -:   29:    {
    #####:   30:        std::cout << "Socket creation failled with error : " << tcpServer.getErroNo() << std::endl;
    #####:   31:        return;
        -:   32:    }
        -:   33:
    #####:   34:    if( tcpServer.bind() != 0 )
        -:   35:    {
    #####:   36:        std::cout <<"Could not bind to local port  errno : " << tcpServer.getErroNo() << std::endl;
    #####:   37:        return;
        -:   38:    }    
        -:   39:
    #####:   40:    std::cout << "Listening ..." << std::endl;
        -:   41:
    #####:   42:    if( tcpServer.listen(50 < 0))
        -:   43:    {
    #####:   44:        std::cout << "Failled to listen to the socket " << std::endl;
    #####:   45:        return ;
        -:   46:    }
        -:   47:
        -:   48:    fd_set sockets_master;
    #####:   49:    FD_ZERO(&sockets_master);
    #####:   50:    FD_SET(tcpServer.getSocket(), &sockets_master);
    #####:   51:    std::vector<int> client_sockets;
    #####:   52:    client_sockets.push_back(tcpServer.getSocket());
        -:   53:
        -:   54:    while (true)
        -:   55:    {
        -:   56:        fd_set socket_reads;
    #####:   57:        socket_reads = sockets_master;
        -:   58:
    #####:   59:        if(select(*std::max_element(client_sockets.begin(), client_sockets.end())  + 1,  &socket_reads, 0 ,0,0) < 0 )
        -:   60:        {
    #####:   61:            std::cout <<"select() failled " << std::endl;
    #####:   62:            return ;
        -:   63:        }
        -:   64:
    #####:   65:        for(auto socket : client_sockets)
        -:   66:        {
    #####:   67:            if( FD_ISSET(socket, &socket_reads) )
        -:   68:            {
    #####:   69:                    if(socket == tcpServer.getSocket() )
        -:   70:                    {
    #####:   71:                        int socket_client = tcpServer.accept();
    #####:   72:                        if(socket_client < 0 )
        -:   73:                        {
    #####:   74:                            std::cout <<"accep() failled " << std::endl;
    #####:   75:                            return ;
        -:   76:                        }
    #####:   77:                        FD_SET(socket_client, &sockets_master );
    #####:   78:                        client_sockets.push_back(socket_client);
    #####:   79:                        std::cout << "New connection from : " << tcpServer.getLastRemoteClientAddress() << std::endl;
        -:   80:
        -:   81:                    }
        -:   82:                    else
        -:   83:                    {
    #####:   84:                        std::string dataReceived = tcpServer.receive(socket, 1024);
    #####:   85:                        if(dataReceived.empty() == true)
        -:   86:                        {
    #####:   87:                            FD_CLR(socket, &sockets_master);
    #####:   88:                            tcpServer.close(socket);
    #####:   89:                            auto socket_to_remove = std::find(client_sockets.begin(), client_sockets.end(), socket );
    #####:   90:                            if( socket_to_remove != client_sockets.end() )
        -:   91:                            {
    #####:   92:                                client_sockets.erase(socket_to_remove);
        -:   93:                            }
    #####:   94:                            continue;
        -:   95:                        }
        -:   96:                        else
        -:   97:                        {
    #####:   98:                            std::cout << "Data received : " << dataReceived << std::endl;
    #####:   99:                            buffer.push_front(dataReceived);
        -:  100:                        }
        -:  101:                    }
        -:  102:            }
        -:  103:        }
    #####:  104:    }
        -:  105:    tcpServer.close();
        -:  106:}
        -:  107:
        -:  108:/*
        -:  109:
        -:  110:int  main()
        -:  111:{
        -:  112:    std::cout <<"Configuring Local address  ..." <<std::endl;
        -:  113:    Socket serverSocket(8080, AF_INET, SOCK_STREAM, AI_PASSIVE);
        -:  114:    std::cout<<"Creating socket..." << std::endl;
        -:  115:    if( serverSocket.create() < 0 )
        -:  116:    {
        -:  117:        std::cout << "Socket creation failled with error : " << serverSocket.getErroNo() << std::endl;
        -:  118:        return 1;
        -:  119:    }
        -:  120:    std::cout << "Binding socket to local address ..." <<  std::endl;
        -:  121:
        -:  122:    if(serverSocket.bind())
        -:  123:    {
        -:  124:        std::cout << "bind() failled with error no : " << serverSocket.getErroNo() << std::endl;
        -:  125:        return 1;
        -:  126:    }
        -:  127:    std::cout << "Listening ... " << std::endl;
        -:  128:    if(serverSocket.listen(10) < 0 )
        -:  129:    {
        -:  130:        std::cout << "listen() failled " << serverSocket.getErroNo() << std::endl;
        -:  131:        return 1;
        -:  132:    }
        -:  133:
        -:  134:    std::cout << "Waiting connection ... " << std::endl;
        -:  135:    int socket_client = serverSocket.accept();
        -:  136:    if( socket_client < 0 )
        -:  137:    {
        -:  138:        std::cout <<"accept() failled with error : " << serverSocket.getErroNo() << std::endl;
        -:  139:        return 1;
        -:  140:    }
        -:  141:    std::cout <<" New incomming connection ...  " <<  serverSocket.getLastRemoteClientAddress() << std::endl;
        -:  142:
        -:  143:
        -:  144:    std::string data_received = serverSocket.receive(socket_client, 1024);
        -:  145:    std::cout << "Received " << data_received.size() << " bytes " << std::endl;
        -:  146:    std::cout << data_received << std::endl;
        -:  147:    std::cout << "Sending response ..." << std::endl;
        -:  148:   const char *response_char  = 
        -:  149:   "HTTP/1.1 200 OK\r\n"
        -:  150:    "Connection: close\r\n"
        -:  151:    "Content-Type: text/plain\r\n\r\n"
        -:  152:    "Local time is: ";
        -:  153:
        -:  154:    std::string response(response_char);
        -:  155:    int bytes_sent = serverSocket.send(socket_client, response);
        -:  156:    std::cout << "Sent " << bytes_sent << " of " << response.size() << std::endl;
        -:  157:
        -:  158:    time_t timer;
        -:  159:    time(&timer);
        -:  160:    char* time_msg = ctime(&timer);
        -:  161:    std::string time_msg_str(time_msg);
        -:  162:
        -:  163:    std::cout << "Time to send : " << time_msg_str << std::endl;
        -:  164:
        -:  165:    bytes_sent = serverSocket.send(socket_client, time_msg_str);
        -:  166:    std::cout << "Sent " << bytes_sent << " of " << time_msg_str.size() << std::endl;
        -:  167:
        -:  168:
        -:  169:    std::cout << "Closing connection ..." << std::endl;
        -:  170:    serverSocket.close();
        -:  171:
        -:  172:    return 0;
        -:  173:}
        -:  174:*/
        -:  175://TCP_Client
        -:  176:/*
        -:  177:int  main()
        -:  178:{
        -:  179:    std::cout <<"Configuring Local address  ..." <<std::endl;
        -:  180:    Socket tcpClient(8787, 0, SOCK_STREAM, 0,"localhost");
        -:  181:    std::cout<<"Creating socket..." << std::endl;
        -:  182:
        -:  183:    const std::string DEVICE_NAME("Device1");
        -:  184:    constexpr unsigned int TCP_PACKET_SIZE = 64;
        -:  185:
        -:  186:    if( tcpClient.create() < 0 )
        -:  187:    {
        -:  188:        std::cout << "Socket creation failled with error : " << tcpClient.getErroNo() << std::endl;
        -:  189:        return 1;
        -:  190:    }
        -:  191:
        -:  192:    if( tcpClient.connect() != 0 )
        -:  193:    {
        -:  194:        std::cout <<"Could not connect to the remote server " << std::endl;
        -:  195:        return 1;
        -:  196:    }    
        -:  197:
        -:  198:    while (true)
        -:  199:    {
        -:  200:        tcpClient.send(tcpClient.getSocket(), DEVICE_NAME.c_str() );
        -:  201:        sleep(2);
        -:  202:    }
        -:  203:    
        -:  204:    tcpClient.close();
        -:  205:    return 0;
        -:  206:}
        -:  207:
        -:  208:*/
        -:  209:
        -:  210://TCP server
    #####:  211:int  main()
        -:  212:{
        -:  213: 
        -:  214:
        -:  215:    while (true)
        -:  216:    {
    #####:  217:        std::this_thread::sleep_for(std::chrono::seconds(2));
        -:  218:    }
        -:  219:    
        -:  220:    return 0;
        -:  221:}
