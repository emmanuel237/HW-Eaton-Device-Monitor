        -:    0:Source:src/Socket/Socket.cpp
        -:    1:#include "Socket.h"
        -:    2:#include<array>
        -:    3:#include <iostream>
        -:    4:
        9:    5:Socket::Socket( unsigned int portNumber, const unsigned int ipAddrType, const unsigned int sockType,
        9:    6:     const unsigned int flags, const std::string&  remoteHostAddress):
       10:    7:    m_is_closed(false)
        -:    8:     {
        -:    9:        struct addrinfo hints;
        9:   10:        memset(&hints,0, sizeof(hints));
        9:   11:        hints.ai_family =  ipAddrType;
        9:   12:        hints.ai_socktype = sockType;
        9:   13:        hints.ai_flags = flags;
        -:   14:
        -:   15:        int res;
        9:   16:        if(remoteHostAddress.empty() ) 
        -:   17:        {
        3:   18:            res =  getaddrinfo(NULL, std::to_string(portNumber).c_str(), &hints, &m_address);
        -:   19:        }
        -:   20:        else
        -:   21:        {
        6:   22:           res =  getaddrinfo(remoteHostAddress.c_str(), std::to_string(portNumber).c_str(), &hints, &m_address);
        -:   23:        }
        -:   24:
        9:   25:        if ( res != 0)
        -:   26:        {
        1:   27:            throw std::invalid_argument("Invalid Network Parameter , errno : " + std::to_string(errno ) );
        -:   28:        }
        -:   29:
        8:   30:     }
        -:   31:     
        7:   32:     int Socket::create()
        -:   33:     {
       14:   34:            m_socket = socket(m_address->ai_family, m_address->ai_socktype, 
        7:   35:                                                                                m_address->ai_protocol);
        7:   36:            return m_socket;
        -:   37:     }
        -:   38:
        2:   39:     int Socket::bind()
        -:   40:     {
        2:   41:         return ::bind(m_socket, m_address->ai_addr, 
        2:   42:                                m_address->ai_addrlen);
        -:   43:     }
        -:   44:
        3:   45:    int Socket::connect()
        -:   46:    {
        3:   47:        return  ::connect(m_socket, m_address->ai_addr, m_address->ai_addrlen);
        -:   48:    }
        -:   49:
        1:   50:     int Socket::listen( const unsigned int maxNberConnections )
        -:   51:     {
        1:   52:        return ::listen(m_socket, maxNberConnections);
        -:   53:     }
        -:   54:
    #####:   55:     int Socket::accept()
        -:   56:     {
        -:   57:        struct sockaddr_storage client_address;
    #####:   58:        socklen_t client_len = sizeof(client_address);
    #####:   59:        int socket_client = ::accept(m_socket, (struct sockaddr*)&client_address, &client_len);
    #####:   60:        if( socket_client >= 0 )
        -:   61:        {
        -:   62:            char address_buffer[256];
    #####:   63:            getnameinfo((struct sockaddr*)&client_address, client_len, address_buffer, sizeof(address_buffer), 0, 0 ,NI_NUMERICHOST);
    #####:   64:            m_last_connected_client_address = std::string(address_buffer);
        -:   65:        }
    #####:   66:        return socket_client;
        -:   67:     }
        -:   68:
        1:   69:    std::string Socket::receive(const int socket, const unsigned int bufferSize)
        -:   70:    {
        2:   71:        std::string data_buffer(bufferSize, ' ');
        1:   72:        std::string ret_data;
        1:   73:        char *char_buffer = const_cast<char*>(data_buffer.data());
        1:   74:        int bytes_received = recv(socket, char_buffer, bufferSize,0);
        -:   75:
        1:   76:        if(bytes_received > 0 )
        1:   77:            ret_data =  data_buffer.substr(0, bytes_received);
        -:   78:        else
    #####:   79:            ret_data = "";
        2:   80:        return ret_data;
        -:   81:    }
        -:   82:
        2:   83:    int Socket::send(const int socket,  const std::string& dataToSend)
        -:   84:    {
        2:   85:        int bytes_sent = ::send(socket, dataToSend.data(), dataToSend.size(), 0 );
        2:   86:        return bytes_sent;
        -:   87:    }
        -:   88:
        8:   89:    void Socket::close(const int socket)
        -:   90:    {
        8:   91:        if (socket == -1)
        -:   92:        {
        8:   93:            if (m_is_closed == false)
        -:   94:            {
        -:   95:
        8:   96:                ::close(m_socket);
        8:   97:                if (m_address != nullptr)
        -:   98:                {
        8:   99:                    freeaddrinfo(m_address);
        8:  100:                    m_address = nullptr;
        -:  101:                }
        8:  102:                m_is_closed = true;
        -:  103:            }
        -:  104:        }
        -:  105:        else
        -:  106:        {
    #####:  107:            ::close(socket);
        -:  108:        }
        8:  109:    }
        -:  110:
        8:  111:    Socket::~Socket()
        -:  112:    {
        8:  113:        if(  m_is_closed == false )
        -:  114:        {
        8:  115:            close();
        -:  116:        }
        8:  117:    }
